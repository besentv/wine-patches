From 7cd116ebdc0651d92ba611ac9f1d19e62867935d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20K=C3=B6lbl?= <besentv@gmail.com>
Date: Mon, 17 Jan 2022 18:35:07 +0100
Subject: [PATCH] shell32/tests: Add test for opening zip files as folder.

---
 dlls/shell32/tests/shelldispatch.c | 41 +++++++++++++++++++++++++++++-
 1 file changed, 40 insertions(+), 1 deletion(-)

diff --git a/dlls/shell32/tests/shelldispatch.c b/dlls/shell32/tests/shelldispatch.c
index 8e69a0bfa4e..cb3eae0cc81 100644
--- a/dlls/shell32/tests/shelldispatch.c
+++ b/dlls/shell32/tests/shelldispatch.c
@@ -127,9 +127,11 @@ static void test_namespace(void)
                     '1','0','1','B','-','9','F','0','8','-',
                     '0','0','A','A','0','0','2','F','9','5','4','E','}',0};
 
-    static WCHAR tempW[MAX_PATH], curW[MAX_PATH];
+    static WCHAR tempW[MAX_PATH], curW[MAX_PATH], appdata_local[MAX_PATH];
+    HANDLE handle = NULL;
     WCHAR *long_pathW = NULL;
     HRESULT r;
+    BOOL successful = FALSE;
     IShellDispatch *sd;
     Folder *folder;
     Folder2 *folder2;
@@ -353,6 +355,43 @@ static void test_namespace(void)
     heap_free(long_pathW);
     RemoveDirectoryW(winetestW);
     SetCurrentDirectoryW(curW);
+
+    r = SHGetFolderPathAndSubDirW(NULL, CSIDL_LOCAL_APPDATA, NULL, 0, NULL, appdata_local);
+    ok(r == S_OK, "Failed to get Appdata/Local folder %#x.\n", r);
+    if(r == S_OK)
+    {
+        wcscat(appdata_local, L"\\Testdir");
+        successful = CreateDirectoryW(appdata_local, NULL);
+        ok(successful == TRUE || GetLastError() == ERROR_ALREADY_EXISTS, "Failed to create directory.\n");
+        wcscat(appdata_local, L"\\Testdir 2");
+        successful = CreateDirectoryW(appdata_local, NULL);
+        ok(successful == TRUE || GetLastError() == ERROR_ALREADY_EXISTS, "Failed to create directory.\n");
+
+        wcscat(appdata_local, L"\\tmp.yeet");
+        handle = CreateFileW(appdata_local, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
+        ok(handle != NULL, "Failed to create file %#x.\n", GetLastError());
+
+        if(handle != NULL)
+        {
+            VariantInit(&var);
+            V_VT(&var) = VT_BSTR;
+            V_BSTR(&var) = SysAllocString(appdata_local);
+
+            r = IShellDispatch_NameSpace(sd, var, &folder);
+            ok(r == S_OK, "IShellDispatch_Namespace failed %#x.\n", r);
+
+            if(r == S_OK)
+            {
+                r = Folder_get_Title(folder, &title);
+                ok(r == S_OK, "Folder::get_Title failed: %#x.\n", r);
+
+                trace("NAME %s.\n", wine_dbgstr_w(title));
+            }
+
+            SysFreeString(V_BSTR(&var));
+        }
+    }
+
     IShellDispatch_Release(sd);
 }
 
-- 
2.34.1

