From e4a2de328d5072ee56dd4c177b5e671a9794ea60 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20K=C3=B6lbl?= <besentv@gmail.com>
Date: Thu, 6 Jan 2022 22:28:43 +0100
Subject: [PATCH 20/27] windows.media.speech: Create activation factory for
 SpeechSynthesizer.

---
 dlls/windows.media.speech/Makefile.in         |   4 +-
 dlls/windows.media.speech/main.c              |   6 +
 dlls/windows.media.speech/speechsynthesizer.c | 214 ++++++++++++------
 dlls/windows.media.speech/tests/speech.c      |   4 +-
 4 files changed, 152 insertions(+), 76 deletions(-)

diff --git a/dlls/windows.media.speech/Makefile.in b/dlls/windows.media.speech/Makefile.in
index 7fe1be89d38..4f15b674d8e 100644
--- a/dlls/windows.media.speech/Makefile.in
+++ b/dlls/windows.media.speech/Makefile.in
@@ -3,7 +3,7 @@ MODULE = windows.media.speech.dll
 IMPORTS = combase uuid
 
 C_SRCS = \
-	speechsynthesizer.c \
-	main.c
+	main.c \
+	speechsynthesizer.c
 
 IDL_SRCS = classes.idl
diff --git a/dlls/windows.media.speech/main.c b/dlls/windows.media.speech/main.c
index f275840e965..1f61f5bb195 100644
--- a/dlls/windows.media.speech/main.c
+++ b/dlls/windows.media.speech/main.c
@@ -23,6 +23,12 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(speech);
 
+/*
+ *
+ * Exports
+ *
+ */
+
 HRESULT WINAPI DllGetClassObject(REFCLSID clsid, REFIID riid, void **out)
 {
     FIXME("clsid %s, riid %s, out %p stub!\n", debugstr_guid(clsid), debugstr_guid(riid), out);
diff --git a/dlls/windows.media.speech/speechsynthesizer.c b/dlls/windows.media.speech/speechsynthesizer.c
index 767efe860f8..2fad257a97e 100644
--- a/dlls/windows.media.speech/speechsynthesizer.c
+++ b/dlls/windows.media.speech/speechsynthesizer.c
@@ -21,6 +21,12 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(speech);
 
+/*
+ *
+ * IVectorView_VoiceInformation
+ *
+ */
+
 struct voice_information_vector
 {
     IVectorView_VoiceInformation IVectorView_VoiceInformation_iface;
@@ -146,6 +152,12 @@ static struct voice_information_vector all_voices =
     0
 };
 
+/*
+ *
+ * SpeechSynthesizer
+ *
+ */
+
 struct speech_synthesizer
 {
     ISpeechSynthesizer ISpeechSynthesizer_iface;
@@ -153,16 +165,17 @@ struct speech_synthesizer
     LONG ref;
 };
 
+/*
+ *
+ * ISpeechSynthesizer
+ *
+ */
+
 static inline struct speech_synthesizer *impl_from_ISpeechSynthesizer(ISpeechSynthesizer *iface)
 {
     return CONTAINING_RECORD(iface, struct speech_synthesizer, ISpeechSynthesizer_iface);
 }
 
-static inline struct speech_synthesizer *impl_from_IClosable(IClosable *iface)
-{
-    return CONTAINING_RECORD(iface, struct speech_synthesizer, IClosable_iface);
-}
-
 static HRESULT STDMETHODCALLTYPE speech_synthesizer_QueryInterface(
         ISpeechSynthesizer *iface, REFIID iid, void **out)
 {
@@ -287,37 +300,43 @@ static const struct ISpeechSynthesizerVtbl speech_synthesizer_vtbl =
     speech_synthesizer_get_Voice,
 };
 
+/*
+ *
+ * IClosable
+ *
+ */
+
+static inline struct speech_synthesizer *impl_from_IClosable(IClosable *iface)
+{
+    return CONTAINING_RECORD(iface, struct speech_synthesizer, IClosable_iface);
+}
+
 static HRESULT STDMETHODCALLTYPE closable_QueryInterface(
         IClosable *iface, REFIID iid, void **out)
 {
     struct speech_synthesizer *impl = impl_from_IClosable(iface);
 
-    return speech_synthesizer_QueryInterface(&impl->ISpeechSynthesizer_iface, iid, out);
+    return ISpeechSynthesizer_QueryInterface(&impl->ISpeechSynthesizer_iface, iid, out);
 }
 
 static ULONG STDMETHODCALLTYPE closable_AddRef(
         IClosable *iface)
 {
     struct speech_synthesizer *impl = impl_from_IClosable(iface);
-    ULONG ref = InterlockedIncrement(&impl->ref);
 
-    TRACE("iface %p, ref %u.\n", iface, ref);
+    TRACE("iface %p.\n", iface);
 
-    return ref;
+    return ISpeechSynthesizer_AddRef(&impl->ISpeechSynthesizer_iface);
 }
 
 static ULONG STDMETHODCALLTYPE closable_Release(
         IClosable *iface)
 {
     struct speech_synthesizer *impl = impl_from_IClosable(iface);
-    ULONG ref = InterlockedDecrement(&impl->ref);
-
-    TRACE("iface %p, ref %u.\n", iface, ref);
 
-    if (!ref)
-        free(impl);
+    TRACE("iface %p.\n", iface);
 
-    return ref;
+    return ISpeechSynthesizer_Release(&impl->ISpeechSynthesizer_iface);
 }
 
 static HRESULT STDMETHODCALLTYPE closable_GetIids(
@@ -366,27 +385,57 @@ static const struct IClosableVtbl closable_vtbl =
     closable_Close,
 };
 
-struct windows_media_speech
+static HRESULT STDMETHODCALLTYPE speech_synthesizer_create_default(IInspectable **instance)
+{
+    struct speech_synthesizer *impl;
+    HRESULT hr;
+
+    TRACE("instance %p.\n", instance);
+
+    if (!(impl = calloc(1, sizeof(*impl))))
+    {
+        *instance = NULL;
+        return E_OUTOFMEMORY;
+    }
+
+    impl->ISpeechSynthesizer_iface.lpVtbl = &speech_synthesizer_vtbl;
+    impl->IClosable_iface.lpVtbl = &closable_vtbl;
+    impl->ref = 1;
+
+    hr = ISpeechSynthesizer_QueryInterface(&impl->ISpeechSynthesizer_iface, &IID_IInspectable, (void**)instance);
+    ISpeechSynthesizer_Release(&impl->ISpeechSynthesizer_iface);
+
+    return hr;
+}
+
+/*
+ *
+ * ActivationFactory
+ *
+ */
+
+struct activation_factory
 {
     IActivationFactory IActivationFactory_iface;
     IInstalledVoicesStatic IInstalledVoicesStatic_iface;
     LONG ref;
 };
 
-static inline struct windows_media_speech *impl_from_IActivationFactory(IActivationFactory *iface)
-{
-    return CONTAINING_RECORD(iface, struct windows_media_speech, IActivationFactory_iface);
-}
+/*
+ *
+ * IActivationFactory for Windows.Media.SpeechSynthesis.SpeechSynthesizer
+ *
+ */
 
-static inline struct windows_media_speech *impl_from_IInstalledVoicesStatic(IInstalledVoicesStatic *iface)
+static inline struct activation_factory *impl_from_IActivationFactory(IActivationFactory *iface)
 {
-    return CONTAINING_RECORD(iface, struct windows_media_speech, IInstalledVoicesStatic_iface);
+    return CONTAINING_RECORD(iface, struct activation_factory, IActivationFactory_iface);
 }
 
-static HRESULT STDMETHODCALLTYPE windows_media_speech_QueryInterface(
-        IActivationFactory *iface, REFIID iid, void **out)
+static HRESULT STDMETHODCALLTYPE activation_factory_QueryInterface(
+    IActivationFactory *iface, REFIID iid, void **out)
 {
-    struct windows_media_speech *impl = impl_from_IActivationFactory(iface);
+    struct activation_factory *impl = impl_from_IActivationFactory(iface);
 
     TRACE("iface %p, iid %s, out %p stub!\n", iface, debugstr_guid(iid), out);
 
@@ -412,97 +461,109 @@ static HRESULT STDMETHODCALLTYPE windows_media_speech_QueryInterface(
     return E_NOINTERFACE;
 }
 
-static ULONG STDMETHODCALLTYPE windows_media_speech_AddRef(
-        IActivationFactory *iface)
+static ULONG STDMETHODCALLTYPE activation_factory_AddRef(
+    IActivationFactory *iface)
 {
-    struct windows_media_speech *impl = impl_from_IActivationFactory(iface);
+    struct activation_factory *impl = impl_from_IActivationFactory(iface);
     ULONG ref = InterlockedIncrement(&impl->ref);
     TRACE("iface %p, ref %u.\n", iface, ref);
     return ref;
 }
 
-static ULONG STDMETHODCALLTYPE windows_media_speech_Release(
-        IActivationFactory *iface)
+static ULONG STDMETHODCALLTYPE activation_factory_Release(
+    IActivationFactory *iface)
 {
-    struct windows_media_speech *impl = impl_from_IActivationFactory(iface);
+    struct activation_factory *impl = impl_from_IActivationFactory(iface);
     ULONG ref = InterlockedDecrement(&impl->ref);
     TRACE("iface %p, ref %u.\n", iface, ref);
     return ref;
 }
 
-static HRESULT STDMETHODCALLTYPE windows_media_speech_GetIids(
-        IActivationFactory *iface, ULONG *iid_count, IID **iids)
+static HRESULT STDMETHODCALLTYPE activation_factory_GetIids(
+    IActivationFactory *iface, ULONG *iid_count, IID **iids)
 {
     FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
     return E_NOTIMPL;
 }
 
-static HRESULT STDMETHODCALLTYPE windows_media_speech_GetRuntimeClassName(
-        IActivationFactory *iface, HSTRING *class_name)
+static HRESULT STDMETHODCALLTYPE activation_factory_GetRuntimeClassName(
+    IActivationFactory *iface, HSTRING *class_name)
 {
     FIXME("iface %p, class_name %p stub!\n", iface, class_name);
     return E_NOTIMPL;
 }
 
-static HRESULT STDMETHODCALLTYPE windows_media_speech_GetTrustLevel(
-        IActivationFactory *iface, TrustLevel *trust_level)
+static HRESULT STDMETHODCALLTYPE activation_factory_GetTrustLevel(
+    IActivationFactory *iface, TrustLevel *trust_level)
 {
     FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
     return E_NOTIMPL;
 }
 
-static HRESULT STDMETHODCALLTYPE windows_media_speech_ActivateInstance(
-        IActivationFactory *iface, IInspectable **instance)
+static HRESULT STDMETHODCALLTYPE activation_factory_ActivateInstance(
+    IActivationFactory *iface, IInspectable **instance)
 {
-    struct speech_synthesizer *obj;
+    TRACE("iface %p, instance %p\n", iface, instance);
 
-    TRACE("iface %p, instance %p.\n", iface, instance);
-
-    if (!(obj = calloc(1, sizeof(*obj))))
-    {
-        *instance = NULL;
-        return E_OUTOFMEMORY;
-    }
+    if (!instance)
+        return E_INVALIDARG;
 
-    obj->ISpeechSynthesizer_iface.lpVtbl = &speech_synthesizer_vtbl;
-    obj->IClosable_iface.lpVtbl = &closable_vtbl;
-    obj->ref = 1;
-    *instance = (IInspectable *)&obj->ISpeechSynthesizer_iface;
-    return S_OK;
+    return speech_synthesizer_create_default(instance);
 }
 
 static const struct IActivationFactoryVtbl activation_factory_vtbl =
 {
-    windows_media_speech_QueryInterface,
-    windows_media_speech_AddRef,
-    windows_media_speech_Release,
-    /* IInspectable methods */
-    windows_media_speech_GetIids,
-    windows_media_speech_GetRuntimeClassName,
-    windows_media_speech_GetTrustLevel,
-    /* IActivationFactory methods */
-    windows_media_speech_ActivateInstance,
+        /* IUnknown methods */
+        activation_factory_QueryInterface,
+        activation_factory_AddRef,
+        activation_factory_Release,
+        /* IInspectable methods */
+        activation_factory_GetIids,
+        activation_factory_GetRuntimeClassName,
+        activation_factory_GetTrustLevel,
+        /* IActivationFactory methods */
+        activation_factory_ActivateInstance,
 };
 
+/*
+ *
+ * IInstalledVoicesStatic
+ *
+ */
+
+static inline struct activation_factory *impl_from_IInstalledVoicesStatic(IInstalledVoicesStatic *iface)
+{
+    return CONTAINING_RECORD(iface, struct activation_factory, IInstalledVoicesStatic_iface);
+}
+
 static HRESULT STDMETHODCALLTYPE installed_voices_static_QueryInterface(
         IInstalledVoicesStatic *iface, REFIID iid, void **out)
 {
-    struct windows_media_speech *impl = impl_from_IInstalledVoicesStatic(iface);
-    return windows_media_speech_QueryInterface(&impl->IActivationFactory_iface, iid, out);
+    struct activation_factory *impl = impl_from_IInstalledVoicesStatic(iface);
+
+    TRACE("iface %p, iid %s, out %p.\n", iface, debugstr_guid(iid), out);
+
+    return IActivationFactory_QueryInterface(&impl->IActivationFactory_iface, iid, out);
 }
 
 static ULONG STDMETHODCALLTYPE installed_voices_static_AddRef(
         IInstalledVoicesStatic *iface)
 {
-    struct windows_media_speech *impl = impl_from_IInstalledVoicesStatic(iface);
-    return windows_media_speech_AddRef(&impl->IActivationFactory_iface);
+    struct activation_factory *impl = impl_from_IInstalledVoicesStatic(iface);
+
+    TRACE("iface %p.\n", iface);
+
+    return IActivationFactory_AddRef(&impl->IActivationFactory_iface);
 }
 
 static ULONG STDMETHODCALLTYPE installed_voices_static_Release(
         IInstalledVoicesStatic *iface)
 {
-    struct windows_media_speech *impl = impl_from_IInstalledVoicesStatic(iface);
-    return windows_media_speech_Release(&impl->IActivationFactory_iface);
+    struct activation_factory *impl = impl_from_IInstalledVoicesStatic(iface);
+
+    TRACE("iface %p.\n", iface);
+
+    return IActivationFactory_Release(&impl->IActivationFactory_iface);
 }
 
 static HRESULT STDMETHODCALLTYPE installed_voices_static_GetIids(
@@ -539,10 +600,11 @@ static HRESULT STDMETHODCALLTYPE installed_voices_static_get_DefaultVoice(
     IInstalledVoicesStatic *iface, IVoiceInformation **value)
 {
     FIXME("iface %p, value %p stub!\n", iface, value);
+
     return E_NOTIMPL;
 }
 
-static const struct IInstalledVoicesStaticVtbl installed_voices_static_vtbl =
+const struct IInstalledVoicesStaticVtbl installed_voices_static_vtbl =
 {
     installed_voices_static_QueryInterface,
     installed_voices_static_AddRef,
@@ -556,14 +618,20 @@ static const struct IInstalledVoicesStaticVtbl installed_voices_static_vtbl =
     installed_voices_static_get_DefaultVoice,
 };
 
-static struct windows_media_speech windows_media_speech =
+/*
+ *
+ * ActivationFactory instance
+ *
+ */
+
+static struct activation_factory speechsynthesizer_af =
 {
-    {&activation_factory_vtbl},
-    {&installed_voices_static_vtbl},
-    1
+    .IActivationFactory_iface = {&activation_factory_vtbl},
+    .IInstalledVoicesStatic_iface = {&installed_voices_static_vtbl},
+    .ref = 1
 };
 
 void STDMETHODCALLTYPE speech_synthesizer_get_activation_factory(IActivationFactory **factory)
 {
-    *factory = &windows_media_speech.IActivationFactory_iface;
+    *factory = &speechsynthesizer_af.IActivationFactory_iface;
 }
diff --git a/dlls/windows.media.speech/tests/speech.c b/dlls/windows.media.speech/tests/speech.c
index 83a2180c47b..2021558b396 100644
--- a/dlls/windows.media.speech/tests/speech.c
+++ b/dlls/windows.media.speech/tests/speech.c
@@ -33,6 +33,8 @@
 #include "windows.media.speechrecognition.h"
 #define WIDL_using_Windows_Media_SpeechSynthesis
 #include "windows.media.speechsynthesis.h"
+#define WIDL_using_Windows_Media_SpeechRecognition
+#include "windows.media.speechrecognition.h"
 
 #include "wine/test.h"
 
@@ -43,7 +45,7 @@ static void test_ActivationFactory(void)
     static const WCHAR *speech_synthesizer_name = L"Windows.Media.SpeechSynthesis.SpeechSynthesizer";
     static const WCHAR *speech_recognizer_name = L"Windows.Media.SpeechRecognition.SpeechRecognizer";
     IActivationFactory *afactory = NULL, *afactory2 = NULL, *afactory3 = NULL, *afactory4 = NULL;
-    ISpeechRecognizerFactory *sr_factory = NULL, *sr_factory2 = NULL;
+    ISpeechRecognizerFactory *sr_factory = NULL;
     ISpeechRecognizerStatics *sr_statics = NULL;
     ISpeechRecognizerStatics2 *sr_statics2 = NULL;
     IInstalledVoicesStatic *installed_voices = NULL;
-- 
2.34.1

