From d5d25200161e2298e6b109bae4830bc2b71d5503 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20K=C3=B6lbl?= <besentv@gmail.com>
Date: Fri, 4 Feb 2022 15:22:27 +0100
Subject: [PATCH v2 24/52] windows.media.speech: Implement
 ISpeechContinuousRecognitionSession add/remove_Completed.

---
 dlls/windows.media.speech/speechrecognizer.c  | 67 +++++++++++++++++--
 .../windows_media_speech_private.h            |  1 +
 2 files changed, 64 insertions(+), 4 deletions(-)

diff --git a/dlls/windows.media.speech/speechrecognizer.c b/dlls/windows.media.speech/speechrecognizer.c
index 4c3113c7d11..83fdd09446d 100644
--- a/dlls/windows.media.speech/speechrecognizer.c
+++ b/dlls/windows.media.speech/speechrecognizer.c
@@ -27,6 +27,13 @@ WINE_DEFAULT_DEBUG_CHANNEL(speech);
  *
  */
 
+struct completed_event
+{
+    ITypedEventHandler_SpeechContinuousRecognitionSession_SpeechContinuousRecognitionCompletedEventArgs *handler;
+    EventRegistrationToken token;
+    struct list entry;
+};
+
 struct speech_recognizer
 {
     ISpeechRecognizer ISpeechRecognizer_iface;
@@ -36,6 +43,8 @@ struct speech_recognizer
 
     ISpeechContinuousRecognitionSession ISpeechContinuousRecognitionSession_iface;
     LONG session_ref;
+
+    struct list completed_event_list;
 };
 
 /*
@@ -168,15 +177,54 @@ static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_add_Compl
     ITypedEventHandler_SpeechContinuousRecognitionSession_SpeechContinuousRecognitionCompletedEventArgs *handler,
     EventRegistrationToken *token)
 {
-    FIXME("iface %p, handler %p, token %p, stub!\n", iface, handler, token);
-    return E_NOTIMPL;
+    struct speech_recognizer *impl = impl_from_ISpeechContinuousRecognitionSession(iface);
+    struct completed_event *event, *new_event;
+
+    TRACE("iface %p, handler %p, token %p.\n", iface, handler, token);
+
+    if (!(new_event = calloc(1, sizeof(*new_event))))
+    {
+        return E_OUTOFMEMORY;
+    }
+
+    new_event->handler = handler;
+    new_event->token.value = 0;
+
+    /* Find the next free token value. */
+    LIST_FOR_EACH_ENTRY(event, &impl->completed_event_list, struct completed_event, entry)
+    {
+        if(event->token.value > new_event->token.value)
+        {
+            new_event->token.value = event->token.value + 1;
+        }
+    }
+
+    list_add_head(&impl->completed_event_list, &new_event->entry);
+
+    *token = new_event->token;
+    TRACE("ret handler %p, token.value %#I64x\n",  new_event->handler, new_event->token.value);
+    return S_OK;
 }
 
 static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_remove_Completed(
     ISpeechContinuousRecognitionSession *iface, EventRegistrationToken token)
 {
-    FIXME("iface %p, token.value %#I64x, stub!\n", iface, token.value);
-    return E_NOTIMPL;
+    struct speech_recognizer *impl = impl_from_ISpeechContinuousRecognitionSession(iface);
+    struct completed_event *event, *event_cursor2;
+
+    TRACE("iface %p, token.value %#I64x, stub!\n", iface, token.value);
+
+    LIST_FOR_EACH_ENTRY_SAFE(event, event_cursor2, &impl->completed_event_list, struct completed_event, entry)
+    {
+        if(event->token.value == token.value)
+        {
+            list_remove(&event->entry);
+            free(event);
+            return S_OK;
+        }
+    }
+
+    return E_FAIL;
 }
 
 static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_add_ResultGenerated(
@@ -284,7 +332,16 @@ static ULONG STDMETHODCALLTYPE speech_recognizer_Release(ISpeechRecognizer *ifac
     TRACE("iface %p, ref %u.\n", iface, ref);
 
     if(!ref)
+    {
+        struct completed_event *event, *event_cursor2;
+        LIST_FOR_EACH_ENTRY_SAFE(event, event_cursor2, &impl->completed_event_list, struct completed_event, entry)
+        {
+            list_remove(&event->entry);
+            free(event);
+        }
+
         free(impl);
+    }
 
     return ref;
 }
@@ -659,6 +716,8 @@ static HRESULT STDMETHODCALLTYPE speech_recognizer_create(ILanguage *language, I
     impl->ISpeechContinuousRecognitionSession_iface.lpVtbl = &speech_continuous_recognition_session_vtbl;
     impl->session_ref = 1;
 
+    list_init(&impl->completed_event_list);
+
     hr = ISpeechRecognizer_QueryInterface(&impl->ISpeechRecognizer_iface, &IID_ISpeechRecognizer, (void**)speechrecognizer);
     ISpeechRecognizer_Release(&impl->ISpeechRecognizer_iface);
 
diff --git a/dlls/windows.media.speech/windows_media_speech_private.h b/dlls/windows.media.speech/windows_media_speech_private.h
index 31360f0a36e..8f77876f80a 100644
--- a/dlls/windows.media.speech/windows_media_speech_private.h
+++ b/dlls/windows.media.speech/windows_media_speech_private.h
@@ -22,6 +22,7 @@
 
 #include "wine/debug.h"
 #include "wine/heap.h"
+#include "wine/list.h"
 
 #include <stdarg.h>
 
-- 
2.35.1

