From af8e279d93a172e92eef3e19d3fcb9dc37994201 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20K=C3=B6lbl?= <besentv@gmail.com>
Date: Mon, 7 Feb 2022 22:48:06 +0100
Subject: [PATCH v2 45/49] windows.media.speech: Add
 IVectorView<SpeechRecognitionResult> stub.

---
 .../speechrecognitionresult.c                 | 130 ++++++++++++++++++
 1 file changed, 130 insertions(+)

diff --git a/dlls/windows.media.speech/speechrecognitionresult.c b/dlls/windows.media.speech/speechrecognitionresult.c
index e126ea034e3..7bc15ad5325 100644
--- a/dlls/windows.media.speech/speechrecognitionresult.c
+++ b/dlls/windows.media.speech/speechrecognitionresult.c
@@ -21,6 +21,136 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(speech);
 
+struct vector_view_speech_recognition_result
+{
+    IVectorView_SpeechRecognitionResult IVectorView_SpeechRecognitionResult_iface;
+    LONG ref;
+};
+
+static inline struct vector_view_speech_recognition_result *impl_from_IVectorView_SpeechRecognitionResult(IVectorView_SpeechRecognitionResult *iface)
+{
+    return CONTAINING_RECORD(iface, struct vector_view_speech_recognition_result, IVectorView_SpeechRecognitionResult_iface);
+}
+
+HRESULT STDMETHODCALLTYPE vector_view_speech_recognition_result_QueryInterface(IVectorView_SpeechRecognitionResult *iface, REFIID iid, void **out)
+{
+    TRACE("iface %p, iid %s, out %p.\n", iface, debugstr_guid(iid), out);
+
+    if (IsEqualGUID(iid, &IID_IUnknown) ||
+        IsEqualGUID(iid, &IID_IInspectable) ||
+        IsEqualGUID(iid, &IID_IVectorView_SpeechRecognitionResult))
+    {
+        IUnknown_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+ULONG STDMETHODCALLTYPE vector_view_speech_recognition_result_AddRef(IVectorView_SpeechRecognitionResult *iface)
+{
+    struct vector_view_speech_recognition_result *impl = impl_from_IVectorView_SpeechRecognitionResult(iface);
+
+    ULONG ref = InterlockedIncrement(&impl->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    return ref;
+}
+
+ULONG STDMETHODCALLTYPE vector_view_speech_recognition_result_Release(IVectorView_SpeechRecognitionResult *iface)
+{
+    struct vector_view_speech_recognition_result *impl = impl_from_IVectorView_SpeechRecognitionResult(iface);
+
+    ULONG ref = InterlockedDecrement(&impl->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    if(!ref)
+        free(impl);
+
+    return ref;
+}
+
+HRESULT STDMETHODCALLTYPE vector_view_speech_recognition_result_GetIids(IVectorView_SpeechRecognitionResult *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
+    return E_NOTIMPL;
+}
+
+HRESULT STDMETHODCALLTYPE vector_view_speech_recognition_result_GetRuntimeClassName(IVectorView_SpeechRecognitionResult *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub!\n", iface, class_name);
+    return E_NOTIMPL;
+}
+
+HRESULT STDMETHODCALLTYPE vector_view_speech_recognition_result_GetTrustLevel(IVectorView_SpeechRecognitionResult *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
+    return E_NOTIMPL;
+}
+
+HRESULT STDMETHODCALLTYPE vector_view_speech_recognition_result_GetAt(IVectorView_SpeechRecognitionResult *iface, UINT32 index, ISpeechRecognitionResult **value)
+{
+    FIXME("iface %p stub!\n", iface);
+    return E_NOTIMPL;
+}
+
+HRESULT STDMETHODCALLTYPE vector_view_speech_recognition_result_get_Size(IVectorView_SpeechRecognitionResult *iface, UINT32 *value)
+{
+    FIXME("iface %p stub!\n", iface);
+    return E_NOTIMPL;
+}
+
+HRESULT STDMETHODCALLTYPE vector_view_speech_recognition_result_IndexOf(IVectorView_SpeechRecognitionResult *iface, ISpeechRecognitionResult *element, UINT32 *index, BOOLEAN *value)
+{
+    FIXME("iface %p stub!\n", iface);
+    return E_NOTIMPL;
+}
+
+HRESULT STDMETHODCALLTYPE vector_view_speech_recognition_result_GetMany(IVectorView_SpeechRecognitionResult *iface, UINT32 start_index, UINT32 items_size, ISpeechRecognitionResult **items, UINT32 *value)
+{
+    FIXME("iface %p stub!\n", iface);
+    return E_NOTIMPL;
+}
+
+static const struct IVectorView_SpeechRecognitionResultVtbl vector_view_speech_recognition_result_vtbl =
+{
+    /*** IUnknown methods ***/
+    vector_view_speech_recognition_result_QueryInterface,
+    vector_view_speech_recognition_result_AddRef,
+    vector_view_speech_recognition_result_Release,
+    /*** IInspectable methods ***/
+    vector_view_speech_recognition_result_GetIids,
+    vector_view_speech_recognition_result_GetRuntimeClassName,
+    vector_view_speech_recognition_result_GetTrustLevel,
+    /*** IVectorView<ABI::Windows::Media::SpeechRecognition::SpeechRecognitionResult* > methods ***/
+    vector_view_speech_recognition_result_GetAt,
+    vector_view_speech_recognition_result_get_Size,
+    vector_view_speech_recognition_result_IndexOf,
+    vector_view_speech_recognition_result_GetMany
+};
+
+static HRESULT STDMETHODCALLTYPE vector_view_speech_recognition_result_create(IVectorView_SpeechRecognitionResult **out)
+{
+    struct vector_view_speech_recognition_result *impl;
+
+    TRACE("out %p.\n", out);
+
+    if (!(impl = calloc(1, sizeof(*impl))))
+    {
+        *out = NULL;
+        return E_OUTOFMEMORY;
+    }
+
+    impl->IVectorView_SpeechRecognitionResult_iface.lpVtbl = &vector_view_speech_recognition_result_vtbl;
+    impl->ref = 1;
+
+    *out = &impl->IVectorView_SpeechRecognitionResult_iface;
+    return S_OK;
+}
+
 /*
  *
  * SpeechRecognitionResult
-- 
2.35.1

