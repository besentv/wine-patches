From 7d1a26e55daa9a0e8eaa053a73a8a52b3402df29 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20K=C3=B6lbl?= <besentv@gmail.com>
Date: Sun, 30 Jan 2022 15:42:59 +0100
Subject: [PATCH v2 25/49] windows.media.speech: Add
 SpeechContinuousRecognitionSession stub.

---
 dlls/windows.media.speech/Makefile.in         |   1 +
 .../speechcontinuousrecognition.c             |  23 +++
 dlls/windows.media.speech/speechrecognizer.c  | 189 ++++++++++++++++++
 .../windows_media_speech_private.h            |   2 +
 4 files changed, 215 insertions(+)
 create mode 100644 dlls/windows.media.speech/speechcontinuousrecognition.c

diff --git a/dlls/windows.media.speech/Makefile.in b/dlls/windows.media.speech/Makefile.in
index b9c78f705a8..d52ce3aa80a 100644
--- a/dlls/windows.media.speech/Makefile.in
+++ b/dlls/windows.media.speech/Makefile.in
@@ -4,6 +4,7 @@ IMPORTS = combase uuid
 
 C_SRCS = \
 	main.c \
+	speechcontinuousrecognition.c \
 	speechrecognitionlistconstraint.c \
 	speechrecognizer.c \
 	speechsynthesizer.c
diff --git a/dlls/windows.media.speech/speechcontinuousrecognition.c b/dlls/windows.media.speech/speechcontinuousrecognition.c
new file mode 100644
index 00000000000..8ff31dda14d
--- /dev/null
+++ b/dlls/windows.media.speech/speechcontinuousrecognition.c
@@ -0,0 +1,23 @@
+/* WinRT Windows.Media.SpeechRecognition implementation
+ *
+ * Copyright 2022 Bernhard KÃ¶lbl
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "windows_media_speech_private.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(speech);
+
diff --git a/dlls/windows.media.speech/speechrecognizer.c b/dlls/windows.media.speech/speechrecognizer.c
index 2a150005703..3e8c4587fca 100644
--- a/dlls/windows.media.speech/speechrecognizer.c
+++ b/dlls/windows.media.speech/speechrecognizer.c
@@ -33,6 +33,192 @@ struct speech_recognizer
     IClosable IClosable_iface;
     ISpeechRecognizer2 ISpeechRecognizer2_iface;
     LONG ref;
+
+    ISpeechContinuousRecognitionSession ISpeechContinuousRecognitionSession_iface;
+    LONG session_ref;
+};
+
+/*
+ *
+ * ISpeechContinuousRecognitionSession
+ *
+ */
+
+static inline struct speech_recognizer *impl_from_ISpeechContinuousRecognitionSession(
+    ISpeechContinuousRecognitionSession *iface)
+{
+    return CONTAINING_RECORD(iface, struct speech_recognizer, ISpeechContinuousRecognitionSession_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_QueryInterface(
+    ISpeechContinuousRecognitionSession *iface, REFIID iid, void **out)
+{
+    TRACE("iface %p, iid %s, out %p.\n", iface, debugstr_guid(iid), out);
+
+    if (IsEqualGUID(iid, &IID_IUnknown) ||
+        IsEqualGUID(iid, &IID_IInspectable) ||
+        IsEqualGUID(iid, &IID_ISpeechContinuousRecognitionSession))
+    {
+        IUnknown_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG STDMETHODCALLTYPE speech_continuous_recognition_session_AddRef(
+    ISpeechContinuousRecognitionSession *iface)
+{
+    struct speech_recognizer *impl = impl_from_ISpeechContinuousRecognitionSession(iface);
+    ULONG ref = InterlockedIncrement(&impl->session_ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+    return ref;
+}
+
+static ULONG STDMETHODCALLTYPE speech_continuous_recognition_session_Release(
+    ISpeechContinuousRecognitionSession *iface)
+{
+    struct speech_recognizer *impl = impl_from_ISpeechContinuousRecognitionSession(iface);
+    ULONG ref = InterlockedDecrement(&impl->session_ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+    return ref;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_GetIids(
+    ISpeechContinuousRecognitionSession *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_GetRuntimeClassName(
+    ISpeechContinuousRecognitionSession *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub!\n", iface, class_name);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_GetTrustLevel(
+    ISpeechContinuousRecognitionSession *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_get_AutoStopSilenceTimeout(
+    ISpeechContinuousRecognitionSession *iface, TimeSpan *value)
+{
+    FIXME("iface %p, value %p stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_set_AutoStopSilenceTimeout(
+    ISpeechContinuousRecognitionSession *iface, TimeSpan value)
+{
+    FIXME("iface %p, value %p stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_StartAsync(
+    ISpeechContinuousRecognitionSession *iface, IAsyncAction **action)
+{
+    FIXME("iface %p, action %p stub!\n", iface, action);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_StartWithModeAsync(
+    ISpeechContinuousRecognitionSession *iface, SpeechContinuousRecognitionMode mode, IAsyncAction **action)
+{
+    FIXME("iface %p, mode %u, action %p stub!\n", iface, mode, action);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_StopAsync(
+    ISpeechContinuousRecognitionSession *iface, IAsyncAction **action)
+{
+    FIXME("iface %p, action %p stub!\n", iface, action);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_CancelAsync(
+    ISpeechContinuousRecognitionSession *iface, IAsyncAction **action)
+{
+    FIXME("iface %p, action %p stub!\n", iface, action);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_PauseAsync(
+    ISpeechContinuousRecognitionSession *iface, IAsyncAction **action)
+{
+    FIXME("iface %p, action %p stub!\n", iface, action);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_Resume(ISpeechContinuousRecognitionSession *iface)
+{
+    FIXME("iface %p stub!\n", iface);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_add_Completed(
+    ISpeechContinuousRecognitionSession *iface,
+    ITypedEventHandler_SpeechContinuousRecognitionSession_SpeechContinuousRecognitionCompletedEventArgs *handler,
+    EventRegistrationToken *token)
+{
+    FIXME("iface %p, handler %p, token %p, stub!\n", iface, handler, token);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_remove_Completed(
+    ISpeechContinuousRecognitionSession *iface, EventRegistrationToken token)
+{
+    FIXME("iface %p, token.value %#I64x, stub!\n", iface, token.value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_add_ResultGenerated(
+    ISpeechContinuousRecognitionSession *iface,
+    ITypedEventHandler_SpeechContinuousRecognitionSession_SpeechContinuousRecognitionResultGeneratedEventArgs *handler,
+    EventRegistrationToken *token)
+{
+    FIXME("iface %p, handler %p, token %p, stub!\n", iface, handler, token);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_remove_ResultGenerated(
+    ISpeechContinuousRecognitionSession *iface, EventRegistrationToken token)
+{
+    FIXME("iface %p, token.value %#I64x, stub!\n", iface, token.value);
+    return E_NOTIMPL;
+}
+
+static const struct ISpeechContinuousRecognitionSessionVtbl 
+    speech_continuous_recognition_session_vtbl =
+{
+    /* IUnknown methods */
+    speech_continuous_recognition_session_QueryInterface,
+    speech_continuous_recognition_session_AddRef,
+    speech_continuous_recognition_session_Release,
+    /* IInspectable methods */
+    speech_continuous_recognition_session_GetIids,
+    speech_continuous_recognition_session_GetRuntimeClassName,
+    speech_continuous_recognition_session_GetTrustLevel,
+    /* ISpeechContinuousRecognitionSession methods */
+    speech_continuous_recognition_session_get_AutoStopSilenceTimeout,
+    speech_continuous_recognition_session_set_AutoStopSilenceTimeout,
+    speech_continuous_recognition_session_StartAsync,
+    speech_continuous_recognition_session_StartWithModeAsync,
+    speech_continuous_recognition_session_StopAsync,
+    speech_continuous_recognition_session_CancelAsync,
+    speech_continuous_recognition_session_PauseAsync,
+    speech_continuous_recognition_session_Resume,
+    speech_continuous_recognition_session_add_Completed,
+    speech_continuous_recognition_session_remove_Completed,
+    speech_continuous_recognition_session_add_ResultGenerated,
+    speech_continuous_recognition_session_remove_ResultGenerated
 };
 
 /*
@@ -465,6 +651,9 @@ static HRESULT STDMETHODCALLTYPE speech_recognizer_create(ILanguage *language, I
     impl->ISpeechRecognizer2_iface.lpVtbl = &speech_recognizer2_vtbl;
     impl->ref = 1;
 
+    impl->ISpeechContinuousRecognitionSession_iface.lpVtbl = &speech_continuous_recognition_session_vtbl;
+    impl->session_ref = 1;
+
     hr = ISpeechRecognizer_QueryInterface(&impl->ISpeechRecognizer_iface, &IID_ISpeechRecognizer, (void**)speechrecognizer);
     ISpeechRecognizer_Release(&impl->ISpeechRecognizer_iface);
 
diff --git a/dlls/windows.media.speech/windows_media_speech_private.h b/dlls/windows.media.speech/windows_media_speech_private.h
index 06ea55b423d..31360f0a36e 100644
--- a/dlls/windows.media.speech/windows_media_speech_private.h
+++ b/dlls/windows.media.speech/windows_media_speech_private.h
@@ -67,6 +67,8 @@ static inline const char *debugstr_hstring(HSTRING hstr)
 void STDMETHODCALLTYPE speech_recognition_list_constraint_get_activation_factory(IActivationFactory **factory) DECLSPEC_HIDDEN;
 void STDMETHODCALLTYPE speech_recognizer_get_activation_factory(IActivationFactory **factory) DECLSPEC_HIDDEN;
 
+HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_create(ISpeechContinuousRecognitionSession **out) DECLSPEC_HIDDEN;
+
 /*
  *
  * Windows.Media.SpeechSynthesis
-- 
2.35.1

