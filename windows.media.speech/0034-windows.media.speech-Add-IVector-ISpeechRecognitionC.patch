From d6e578977cda474996bb2f1426e3221befa95417 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20K=C3=B6lbl?= <besentv@gmail.com>
Date: Fri, 4 Feb 2022 18:10:28 +0100
Subject: [PATCH v2 34/45] windows.media.speech: Add
 IVector<ISpeechRecognitionConstraint> stub.

---
 dlls/windows.media.speech/speechrecognizer.c | 223 +++++++++++++++++++
 1 file changed, 223 insertions(+)

diff --git a/dlls/windows.media.speech/speechrecognizer.c b/dlls/windows.media.speech/speechrecognizer.c
index f711a635f8b..1fb69dd44c2 100644
--- a/dlls/windows.media.speech/speechrecognizer.c
+++ b/dlls/windows.media.speech/speechrecognizer.c
@@ -21,6 +21,226 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(speech);
 
+/*
+ *
+ * IVector<ISpeechRecognitionConstraint>
+ *
+ */
+
+struct vector_speech_recgonition_constraint
+{
+    IVector_ISpeechRecognitionConstraint IVector_ISpeechRecognitionConstraint_iface;
+    LONG ref;
+
+    ULONG count;
+    ISpeechRecognitionConstraint **values;
+};
+
+static inline struct vector_speech_recgonition_constraint *impl_from_IVector_ISpeechRecognitionConstraint(
+    IVector_ISpeechRecognitionConstraint *iface)
+{
+    return CONTAINING_RECORD(iface, struct vector_speech_recgonition_constraint, IVector_ISpeechRecognitionConstraint_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_QueryInterface(
+    IVector_ISpeechRecognitionConstraint *iface, REFIID iid, void **out)
+{
+    TRACE("iface %p, iid %s, out %p.\n", iface, debugstr_guid(iid), out);
+
+    if (IsEqualGUID(iid, &IID_IUnknown) ||
+        IsEqualGUID(iid, &IID_IInspectable) ||
+        IsEqualGUID(iid, &IID_IVector_ISpeechRecognitionConstraint))
+    {
+        IUnknown_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG STDMETHODCALLTYPE vector_speech_recgonition_constraint_AddRef(
+    IVector_ISpeechRecognitionConstraint *iface)
+{
+    struct vector_speech_recgonition_constraint *impl = impl_from_IVector_ISpeechRecognitionConstraint(iface);
+
+    ULONG ref = InterlockedIncrement(&impl->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    return ref;
+}
+
+static ULONG STDMETHODCALLTYPE vector_speech_recgonition_constraint_Release(
+    IVector_ISpeechRecognitionConstraint *iface)
+{
+    struct vector_speech_recgonition_constraint *impl = impl_from_IVector_ISpeechRecognitionConstraint(iface);
+
+    ULONG ref = InterlockedDecrement(&impl->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    if(ref)
+    {
+        free(impl->values);
+        free(impl);
+    }
+
+    return ref;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_GetIids(
+    IVector_ISpeechRecognitionConstraint *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_GetRuntimeClassName(
+    IVector_ISpeechRecognitionConstraint *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub!\n", iface, class_name);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_GetTrustLevel(
+    IVector_ISpeechRecognitionConstraint *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_GetAt(
+    IVector_ISpeechRecognitionConstraint *iface, UINT32 index, ISpeechRecognitionConstraint **value)
+{
+    FIXME("iface %p, index %u, value %p stub!\n", iface, index, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_get_Size(
+    IVector_ISpeechRecognitionConstraint *iface, UINT32 *value)
+{
+    FIXME("iface %p, value %p stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_GetView(
+    IVector_ISpeechRecognitionConstraint *iface, IVectorView_ISpeechRecognitionConstraint **value)
+{
+    FIXME("iface %p, value %p stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_IndexOf(
+    IVector_ISpeechRecognitionConstraint *iface, ISpeechRecognitionConstraint *element, UINT32 *index, BOOLEAN *value)
+{
+    FIXME("iface %p, element %p, index %p, value %p stub!\n", iface, element, index, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_SetAt(
+    IVector_ISpeechRecognitionConstraint *iface, UINT32 index, ISpeechRecognitionConstraint *value)
+{
+    FIXME("iface %p, index %u, value %p stub!\n", iface, index, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_InsertAt(
+    IVector_ISpeechRecognitionConstraint *iface, UINT32 index, ISpeechRecognitionConstraint *value)
+{
+    FIXME("iface %p, index %u, value %p stub!\n", iface, index, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_RemoveAt(
+    IVector_ISpeechRecognitionConstraint *iface, UINT32 index)
+{
+    FIXME("iface %p, index %u, stub!\n", iface, index);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_Append(
+    IVector_ISpeechRecognitionConstraint *iface, ISpeechRecognitionConstraint *value)
+{
+    FIXME("iface %p, value %p, stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_RemoveAtEnd(
+    IVector_ISpeechRecognitionConstraint *iface)
+{
+    FIXME("iface %p, stub!\n", iface);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_Clear(
+    IVector_ISpeechRecognitionConstraint *iface)
+{
+    FIXME("iface %p, stub!\n", iface);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_GetMany(
+    IVector_ISpeechRecognitionConstraint *iface, UINT32 start_index, UINT32 items_size, ISpeechRecognitionConstraint **items, UINT32 *value)
+{
+    FIXME("iface %p, start_index %u, items_size %u, items %p, value %p stub!\n", iface, start_index, items_size, items, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_speech_recgonition_constraint_ReplaceAll(
+    IVector_ISpeechRecognitionConstraint *iface, UINT32 count, ISpeechRecognitionConstraint **items)
+{
+    FIXME("iface %p, count %u, items %p stub!\n", iface, count, items);
+    return E_NOTIMPL;
+}
+
+static const struct IVector_ISpeechRecognitionConstraintVtbl vector_speech_recgonition_constraint_vtbl =
+{
+    /* IUnknown methods */
+    vector_speech_recgonition_constraint_QueryInterface,
+    vector_speech_recgonition_constraint_AddRef,
+    vector_speech_recgonition_constraint_Release,
+    /* IInspectable methods */
+    vector_speech_recgonition_constraint_GetIids,
+    vector_speech_recgonition_constraint_GetRuntimeClassName,
+    vector_speech_recgonition_constraint_GetTrustLevel,
+    /* IVector<ISpeechRecognitionConstraint> */
+    vector_speech_recgonition_constraint_GetAt,
+    vector_speech_recgonition_constraint_get_Size,
+    vector_speech_recgonition_constraint_GetView,
+    vector_speech_recgonition_constraint_IndexOf,
+    vector_speech_recgonition_constraint_SetAt,
+    vector_speech_recgonition_constraint_InsertAt,
+    vector_speech_recgonition_constraint_RemoveAt,
+    vector_speech_recgonition_constraint_Append,
+    vector_speech_recgonition_constraint_RemoveAtEnd,
+    vector_speech_recgonition_constraint_Clear,
+    vector_speech_recgonition_constraint_GetMany,
+    vector_speech_recgonition_constraint_ReplaceAll
+};
+
+static HRESULT vector_speech_recgonition_constraint_create(
+    ISpeechRecognitionConstraint **values, SIZE_T count, IVector_ISpeechRecognitionConstraint **out)
+{
+    struct vector_speech_recgonition_constraint *impl;
+
+    if (!(impl = calloc(1, sizeof(*impl))))
+    {
+        *out = NULL;
+        return E_OUTOFMEMORY;
+    }
+
+    impl->IVector_ISpeechRecognitionConstraint_iface.lpVtbl = &vector_speech_recgonition_constraint_vtbl;
+    impl->ref = 1;
+
+    impl->count = count;
+    impl->values = calloc(1, count * sizeof(ISpeechRecognitionConstraint*));
+    memcpy(impl->values, values, count * sizeof(ISpeechRecognitionConstraint*));
+
+    *out = &impl->IVector_ISpeechRecognitionConstraint_iface;
+    return S_OK;
+}
+
 /*
  *
  * SpeechRecognizer
@@ -35,6 +255,7 @@ struct speech_recognizer
     LONG ref;
 
     ISpeechContinuousRecognitionSession *recognition_session;
+    IVector_ISpeechRecognitionConstraint *vector_constraints;
 };
 
 /*
@@ -102,6 +323,7 @@ static ULONG STDMETHODCALLTYPE speech_recognizer_Release(ISpeechRecognizer *ifac
     if(!ref)
     {
         ISpeechContinuousRecognitionSession_Release(impl->recognition_session);
+        IVector_ISpeechRecognitionConstraint_Release(impl->vector_constraints);
         free(impl);
     }
 
@@ -477,6 +699,7 @@ static HRESULT STDMETHODCALLTYPE speech_recognizer_create(ILanguage *language, I
 
     impl->recognition_session = NULL;
     hr = speech_continuous_recognition_session_create(&impl->recognition_session);
+    hr = vector_speech_recgonition_constraint_create(NULL, 0, &impl->vector_constraints);
 
     hr = ISpeechRecognizer_QueryInterface(&impl->ISpeechRecognizer_iface, &IID_ISpeechRecognizer, (void**)speechrecognizer);
     ISpeechRecognizer_Release(&impl->ISpeechRecognizer_iface);
-- 
2.34.1

