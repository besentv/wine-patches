From 7c56fa652033b0fb5b703ae4d0d7239e043b5bb0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20K=C3=B6lbl?= <besentv@gmail.com>
Date: Fri, 4 Feb 2022 15:36:22 +0100
Subject: [PATCH v2 25/52] windows.media.speech: Implement
 ISpeechContinuousRecognitionSession add/remove_ResultGenerated.

---
 dlls/windows.media.speech/speechrecognizer.c | 63 ++++++++++++++++++--
 1 file changed, 59 insertions(+), 4 deletions(-)

diff --git a/dlls/windows.media.speech/speechrecognizer.c b/dlls/windows.media.speech/speechrecognizer.c
index 83fdd09446d..ef98f14824f 100644
--- a/dlls/windows.media.speech/speechrecognizer.c
+++ b/dlls/windows.media.speech/speechrecognizer.c
@@ -34,6 +34,13 @@ struct completed_event
     struct list entry;
 };
 
+struct result_event
+{
+    ITypedEventHandler_SpeechContinuousRecognitionSession_SpeechContinuousRecognitionResultGeneratedEventArgs *handler;
+    EventRegistrationToken token;
+    struct list entry;
+};
+
 struct speech_recognizer
 {
     ISpeechRecognizer ISpeechRecognizer_iface;
@@ -45,6 +52,7 @@ struct speech_recognizer
     LONG session_ref;
 
     struct list completed_event_list;
+    struct list result_event_list;
 };
 
 /*
@@ -232,15 +240,54 @@ static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_add_Resul
     ITypedEventHandler_SpeechContinuousRecognitionSession_SpeechContinuousRecognitionResultGeneratedEventArgs *handler,
     EventRegistrationToken *token)
 {
-    FIXME("iface %p, handler %p, token %p, stub!\n", iface, handler, token);
-    return E_NOTIMPL;
+    struct speech_recognizer *impl = impl_from_ISpeechContinuousRecognitionSession(iface);
+    struct result_event *event, *new_event;
+
+    TRACE("iface %p, handler %p, token %p.\n", iface, handler, token);
+
+    if (!(new_event = calloc(1, sizeof(*new_event))))
+    {
+        return E_OUTOFMEMORY;
+    }
+
+    new_event->handler = handler;
+    new_event->token.value = 0;
+
+    /* Find the next free token value. */
+    LIST_FOR_EACH_ENTRY(event, &impl->result_event_list, struct result_event, entry)
+    {
+        if(event->token.value > new_event->token.value)
+        {
+            new_event->token.value = event->token.value + 1;
+        }
+    }
+
+    list_add_head(&impl->result_event_list, &new_event->entry);
+
+    *token = new_event->token;
+    TRACE("ret handler %p, token.value %#I64x\n",  new_event->handler, new_event->token.value);
+    return S_OK;
 }
 
 static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_session_remove_ResultGenerated(
     ISpeechContinuousRecognitionSession *iface, EventRegistrationToken token)
 {
-    FIXME("iface %p, token.value %#I64x, stub!\n", iface, token.value);
-    return E_NOTIMPL;
+    struct speech_recognizer *impl = impl_from_ISpeechContinuousRecognitionSession(iface);
+    struct result_event *event, *event_cursor2;
+
+    TRACE("iface %p, token.value %#I64x, stub!\n", iface, token.value);
+
+    LIST_FOR_EACH_ENTRY_SAFE(event, event_cursor2, &impl->result_event_list, struct result_event, entry)
+    {
+        if(event->token.value == token.value)
+        {
+            list_remove(&event->entry);
+            free(event);
+            return S_OK;
+        }
+    }
+
+    return E_FAIL;
 }
 
 static const struct ISpeechContinuousRecognitionSessionVtbl 
@@ -334,12 +381,19 @@ static ULONG STDMETHODCALLTYPE speech_recognizer_Release(ISpeechRecognizer *ifac
     if(!ref)
     {
         struct completed_event *event, *event_cursor2;
+        struct result_event *re, *re2;
         LIST_FOR_EACH_ENTRY_SAFE(event, event_cursor2, &impl->completed_event_list, struct completed_event, entry)
         {
             list_remove(&event->entry);
             free(event);
         }
 
+        LIST_FOR_EACH_ENTRY_SAFE(re, re2, &impl->result_event_list, struct result_event, entry)
+        {
+            list_remove(&re->entry);
+            free(re);
+        }
+
         free(impl);
     }
 
@@ -717,6 +771,7 @@ static HRESULT STDMETHODCALLTYPE speech_recognizer_create(ILanguage *language, I
     impl->session_ref = 1;
 
     list_init(&impl->completed_event_list);
+    list_init(&impl->result_event_list);
 
     hr = ISpeechRecognizer_QueryInterface(&impl->ISpeechRecognizer_iface, &IID_ISpeechRecognizer, (void**)speechrecognizer);
     ISpeechRecognizer_Release(&impl->ISpeechRecognizer_iface);
-- 
2.35.1

