From 028e23ce2a7fda221ecd8d0bc17f617af753fe91 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20K=C3=B6lbl?= <besentv@gmail.com>
Date: Thu, 3 Feb 2022 17:42:13 +0100
Subject: [PATCH v2 27/45] windows.media.speech: Add
 SpeechContinuousRecognitionResultGeneratedEventArgs stub.

---
 .../speechcontinuousrecognition.c             | 140 ++++++++++++++++++
 1 file changed, 140 insertions(+)

diff --git a/dlls/windows.media.speech/speechcontinuousrecognition.c b/dlls/windows.media.speech/speechcontinuousrecognition.c
index 83c070916c3..17762a02a4f 100644
--- a/dlls/windows.media.speech/speechcontinuousrecognition.c
+++ b/dlls/windows.media.speech/speechcontinuousrecognition.c
@@ -156,6 +156,146 @@ HRESULT STDMETHODCALLTYPE speech_continuous_recognition_completed_event_args_cre
     return S_OK;
 }
 
+/*
+ *
+ * SpeechContinuousRecognitionResultGeneratedEventArgs
+ *
+ */
+
+struct speech_continuous_recognition_result_generated_event_args
+{
+    ISpeechContinuousRecognitionResultGeneratedEventArgs ISpeechContinuousRecognitionResultGeneratedEventArgs_iface;
+    LONG ref;
+
+    ISpeechRecognitionResult *result;
+};
+
+/*
+ *
+ * ISpeechContinuousRecognitionResultGeneratedEventArgs
+ *
+ */
+
+static inline struct speech_continuous_recognition_result_generated_event_args *impl_from_ISpeechContinuousRecognitionResultGeneratedEventArgs(
+    ISpeechContinuousRecognitionResultGeneratedEventArgs *iface)
+{
+    return CONTAINING_RECORD(iface, struct speech_continuous_recognition_result_generated_event_args,
+        ISpeechContinuousRecognitionResultGeneratedEventArgs_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_result_generated_event_args_QueryInterface(
+    ISpeechContinuousRecognitionResultGeneratedEventArgs *iface, REFIID iid, void **out)
+{
+    TRACE("iface %p, iid %s, out %p.\n", iface, debugstr_guid(iid), out);
+
+    if (IsEqualGUID(iid, &IID_IUnknown) ||
+        IsEqualGUID(iid, &IID_IInspectable) ||
+        IsEqualGUID(iid, &IID_ISpeechContinuousRecognitionResultGeneratedEventArgs))
+    {
+        IUnknown_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG STDMETHODCALLTYPE speech_continuous_recognition_result_generated_event_args_AddRef(
+    ISpeechContinuousRecognitionResultGeneratedEventArgs *iface)
+{
+    struct speech_continuous_recognition_result_generated_event_args *impl = impl_from_ISpeechContinuousRecognitionResultGeneratedEventArgs(iface);
+
+    ULONG ref = InterlockedIncrement(&impl->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    return ref;
+}
+
+static ULONG STDMETHODCALLTYPE speech_continuous_recognition_result_generated_event_args_Release(
+    ISpeechContinuousRecognitionResultGeneratedEventArgs *iface)
+{
+    struct speech_continuous_recognition_result_generated_event_args *impl = impl_from_ISpeechContinuousRecognitionResultGeneratedEventArgs(iface);
+
+    ULONG ref = InterlockedDecrement(&impl->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    if(!ref)
+    {
+        ISpeechRecognitionResult_Release(impl->result);
+        free(impl);
+    }
+
+    return ref;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_result_generated_event_args_GetIids(
+    ISpeechContinuousRecognitionResultGeneratedEventArgs *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_result_generated_event_args_GetRuntimeClassName(
+        ISpeechContinuousRecognitionResultGeneratedEventArgs *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub!\n", iface, class_name);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_result_generated_event_args_GetTrustLevel(
+    ISpeechContinuousRecognitionResultGeneratedEventArgs *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_result_generated_event_args_get_Result(
+        ISpeechContinuousRecognitionResultGeneratedEventArgs *iface, ISpeechRecognitionResult **value)
+{
+    FIXME("iface %p, value %p stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static const struct ISpeechContinuousRecognitionResultGeneratedEventArgsVtbl
+    speech_continuous_recognition_result_generated_event_args_vtbl =
+{
+    /* IUnknown methods */
+    speech_continuous_recognition_result_generated_event_args_QueryInterface,
+    speech_continuous_recognition_result_generated_event_args_AddRef,
+    speech_continuous_recognition_result_generated_event_args_Release,
+    /* IInspectable methods */
+    speech_continuous_recognition_result_generated_event_args_GetIids,
+    speech_continuous_recognition_result_generated_event_args_GetRuntimeClassName,
+    speech_continuous_recognition_result_generated_event_args_GetTrustLevel,
+    /* ISpeechContinuousRecognitionResultGeneratedEventArgs methods */
+    speech_continuous_recognition_result_generated_event_args_get_Result
+};
+
+HRESULT STDMETHODCALLTYPE speech_continuous_recognition_result_generated_event_args_create(
+    ISpeechRecognitionResult *result, ISpeechContinuousRecognitionResultGeneratedEventArgs **out)
+{
+    struct speech_continuous_recognition_result_generated_event_args *impl;
+
+    TRACE("out %p.\n", out);
+
+    if (!(impl = calloc(1, sizeof(*impl))))
+    {
+        *out = NULL;
+        return E_OUTOFMEMORY;
+    }
+
+    impl->ISpeechContinuousRecognitionResultGeneratedEventArgs_iface.lpVtbl = &speech_continuous_recognition_result_generated_event_args_vtbl;
+    impl->ref = 1;
+
+    impl->result = result;
+
+    *out = &impl->ISpeechContinuousRecognitionResultGeneratedEventArgs_iface;
+    return S_OK;
+}
+
 /*
  *
  * SpeechContinuousRecognitionSession
-- 
2.34.1

