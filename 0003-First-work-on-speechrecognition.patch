From 3e2aeef29af0eaadf424da3c09167865b74eb45f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20K=C3=B6lbl?= <besentv@gmail.com>
Date: Sat, 18 Dec 2021 19:08:04 +0100
Subject: [PATCH 3/3] First work on speechrecognition.

---
 dlls/windows.media.speech/Makefile.in         |   3 +-
 dlls/windows.media.speech/classes.idl         |   1 +
 dlls/windows.media.speech/main.c              |  21 +-
 dlls/windows.media.speech/speechrecognition.c | 350 ++++++++++++++++++
 .../windows_media_speech_private.h            |  53 +++
 include/Makefile.in                           |   1 +
 include/windows.globalization.idl             |  42 +++
 include/windows.media.speechrecognition.idl   | 338 +++++++++++++++++
 include/windows.media.speechsynthesis.idl     |   3 +-
 9 files changed, 793 insertions(+), 19 deletions(-)
 create mode 100644 dlls/windows.media.speech/speechrecognition.c
 create mode 100644 dlls/windows.media.speech/windows_media_speech_private.h
 create mode 100644 include/windows.media.speechrecognition.idl

diff --git a/dlls/windows.media.speech/Makefile.in b/dlls/windows.media.speech/Makefile.in
index 9fbff8e132f..7d25ac3a20f 100644
--- a/dlls/windows.media.speech/Makefile.in
+++ b/dlls/windows.media.speech/Makefile.in
@@ -2,6 +2,7 @@ MODULE = windows.media.speech.dll
 IMPORTS = combase uuid
 
 C_SRCS = \
-	main.c
+	main.c \
+	speechrecognition.c
 
 IDL_SRCS = classes.idl
diff --git a/dlls/windows.media.speech/classes.idl b/dlls/windows.media.speech/classes.idl
index 6c141bf4768..4dd43cf6eed 100644
--- a/dlls/windows.media.speech/classes.idl
+++ b/dlls/windows.media.speech/classes.idl
@@ -16,4 +16,5 @@
 
 #pragma makedep register
 
+#include "windows.media.speechrecognition.idl"
 #include "windows.media.speechsynthesis.idl"
diff --git a/dlls/windows.media.speech/main.c b/dlls/windows.media.speech/main.c
index b607f9a8203..de7dbac0cd0 100644
--- a/dlls/windows.media.speech/main.c
+++ b/dlls/windows.media.speech/main.c
@@ -17,23 +17,10 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include <stdarg.h>
-
-#define COBJMACROS
-#include "windef.h"
-#include "winbase.h"
-#include "winstring.h"
-#include "wine/debug.h"
-#include "objbase.h"
-
-#include "initguid.h"
-#include "activation.h"
-
-#define WIDL_using_Windows_Foundation
-#define WIDL_using_Windows_Foundation_Collections
-#include "windows.foundation.h"
-#define WIDL_using_Windows_Media_SpeechSynthesis
-#include "windows.media.speechsynthesis.h"
+
+#define WINDOWS_MEDIA_SPEECH_INIT_GUID
+
+#include "windows_media_speech_private.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(speech);
 
diff --git a/dlls/windows.media.speech/speechrecognition.c b/dlls/windows.media.speech/speechrecognition.c
new file mode 100644
index 00000000000..069904a76d0
--- /dev/null
+++ b/dlls/windows.media.speech/speechrecognition.c
@@ -0,0 +1,350 @@
+/* WinRT Windows.Media.SpeechRecognition implementation
+ *
+ * Copyright 2021 Bernhard KÃ¶lbl
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "windows_media_speech_private.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(speech);
+
+/*
+*
+* ISpeechContinuousRecognitionCompletedEventArgs
+*
+*/
+
+#pragma region ISpeechContinuousRecognitionCompletedEventArgs
+
+struct speech_continuous_recognition_completed_event_args
+{
+    ISpeechContinuousRecognitionCompletedEventArgs ISpeechContinuousRecognitionCompletedEventArgs_iface;
+    LONG ref;
+};
+
+static inline struct speech_continuous_recognition_completed_event_args
+        *impl_from_ISpeechContinuousRecognitionCompletedEventArgs(
+        ISpeechContinuousRecognitionCompletedEventArgs *iface)
+{
+    return CONTAINING_RECORD(iface, struct speech_continuous_recognition_completed_event_args, ISpeechContinuousRecognitionCompletedEventArgs_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_completed_event_args_QueryInterface(
+        ISpeechContinuousRecognitionCompletedEventArgs *iface, REFIID iid, void **out)
+{
+    TRACE("iface %p, iid %s, out %p stub!\n", iface, debugstr_guid(iid), out);
+
+    if (IsEqualGUID(iid, &IID_IUnknown) ||
+        IsEqualGUID(iid, &IID_IInspectable) ||
+        IsEqualGUID(iid, &IID_ISpeechContinuousRecognitionCompletedEventArgs))
+    {
+        IUnknown_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG STDMETHODCALLTYPE speech_continuous_recognition_completed_event_args_AddRef(
+        ISpeechContinuousRecognitionCompletedEventArgs *iface)
+{
+    struct speech_continuous_recognition_completed_event_args *This = impl_from_ISpeechContinuousRecognitionCompletedEventArgs(iface);
+
+    ULONG ref = InterlockedIncrement(&This->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    return ref;
+}
+
+static ULONG STDMETHODCALLTYPE speech_continuous_recognition_completed_event_args_Release(
+        ISpeechContinuousRecognitionCompletedEventArgs *iface)
+{
+    struct speech_continuous_recognition_completed_event_args *This = impl_from_ISpeechContinuousRecognitionCompletedEventArgs(iface);
+
+    ULONG ref = InterlockedDecrement(&This->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    if(!ref)
+        heap_free(This);
+
+    return ref;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_completed_event_args_GetIids(
+        ISpeechContinuousRecognitionCompletedEventArgs *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_completed_event_args_GetRuntimeClassName(
+        ISpeechContinuousRecognitionCompletedEventArgs *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub!\n", iface, class_name);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_completed_event_args_GetTrustLevel(
+        ISpeechContinuousRecognitionCompletedEventArgs *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_continuous_recognition_completed_event_args_get_Status(
+        ISpeechContinuousRecognitionCompletedEventArgs *iface, SpeechRecognitionResultStatus *value)
+{
+    FIXME("iface %p, value %p stub!\n", iface, value);
+    *value = SpeechRecognitionResultStatus_Success;
+    return E_NOTIMPL;
+}
+
+static const struct ISpeechContinuousRecognitionCompletedEventArgsVtbl 
+        speech_continuous_recognition_completed_event_args_vtbl =
+{
+    /* IUnknown methods */
+    speech_continuous_recognition_completed_event_args_QueryInterface,
+    speech_continuous_recognition_completed_event_args_AddRef,
+    speech_continuous_recognition_completed_event_args_Release,
+    /* IInspectable methods */
+    speech_continuous_recognition_completed_event_args_GetIids,
+    speech_continuous_recognition_completed_event_args_GetRuntimeClassName,
+    speech_continuous_recognition_completed_event_args_GetTrustLevel,
+    /* ISpeechContinuousRecognitionCompletedEventArgs methods */
+    speech_continuous_recognition_completed_event_args_get_Status
+};
+
+static HRESULT speech_continuous_recognition_completed_event_args_create(REFIID iid, void **obj)
+{
+    struct speech_continuous_recognition_completed_event_args *This;
+    HRESULT hr;
+
+    if (!(This = heap_alloc_zero(sizeof(*This))))
+        return E_OUTOFMEMORY;
+
+    This->ISpeechContinuousRecognitionCompletedEventArgs_iface.lpVtbl = &speech_continuous_recognition_completed_event_args_vtbl;
+    This->ref = 1;
+
+    hr = ISpeechContinuousRecognitionCompletedEventArgs_QueryInterface(&This->ISpeechContinuousRecognitionCompletedEventArgs_iface, iid, obj);
+    ISpeechContinuousRecognitionCompletedEventArgs_Release(&This->ISpeechContinuousRecognitionCompletedEventArgs_iface);
+
+    return hr;
+}
+
+#pragma endregion ISpeechContinuousRecognitionCompletedEventArgs
+
+/*
+*
+* ISpeechRecognizer
+*
+*/
+
+#pragma region ISpeechRecognizer
+
+struct speech_recognizer
+{
+    ISpeechRecognizer ISpeechRecognizer_iface;
+    LONG ref;
+};
+
+static inline struct speech_recognizer *impl_from_ISpeechRecognizer(ISpeechRecognizer *iface)
+{
+    return CONTAINING_RECORD(iface, struct speech_recognizer, ISpeechRecognizer_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_QueryInterface(ISpeechRecognizer *iface, REFIID iid, void **out)
+{
+    TRACE("iface %p, iid %s, out %p stub!\n", iface, debugstr_guid(iid), out);
+
+    if (IsEqualGUID(iid, &IID_IUnknown) ||
+        IsEqualGUID(iid, &IID_IInspectable) ||
+        IsEqualGUID(iid, &IID_ISpeechRecognizer))
+    {
+        IUnknown_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG STDMETHODCALLTYPE speech_recognizer_AddRef(ISpeechRecognizer *iface)
+{
+    struct speech_recognizer *This = impl_from_ISpeechRecognizer(iface);
+
+    ULONG ref = InterlockedIncrement(&This->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    return ref;
+}
+
+static ULONG STDMETHODCALLTYPE speech_recognizer_Release(ISpeechRecognizer *iface)
+{
+    struct speech_recognizer *This = impl_from_ISpeechRecognizer(iface);
+
+    ULONG ref = InterlockedDecrement(&This->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+
+    if(!ref)
+        heap_free(This);
+
+    return ref;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_GetIids(ISpeechRecognizer *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_GetRuntimeClassName(ISpeechRecognizer *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub!\n", iface, class_name);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_GetTrustLevel(ISpeechRecognizer *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_CompileConstraintsAsync(ISpeechRecognizer *iface,
+    IAsyncOperation_SpeechRecognitionCompilationResult **operation)
+{
+    FIXME("iface %p, operation %p stub!\n", iface, operation);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_RecognizeAsync(ISpeechRecognizer *iface,
+    IAsyncOperation_SpeechRecognitionResult **operation)
+{
+    FIXME("iface %p, operation %p stub!\n", iface, operation);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_RecognizeWithUIAsync(ISpeechRecognizer *iface,
+    IAsyncOperation_SpeechRecognitionResult **operation)
+{
+    FIXME("iface %p, operation %p stub!\n", iface, operation);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_get_Constraints(ISpeechRecognizer *iface,
+    IVectorView_ISpeechRecognitionConstraint **vector)
+{
+    FIXME("iface %p, operation %p stub!\n", iface, vector);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_get_CurrentLanguage(ISpeechRecognizer *iface,
+    ILanguage **language)
+{
+    FIXME("iface %p, operation %p stub!\n", iface, language);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_get_Timeouts(ISpeechRecognizer *iface,
+    ISpeechRecognizerTimeouts **timeouts)
+{
+    FIXME("iface %p, operation %p stub!\n", iface, timeouts);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_get_UIOptions(ISpeechRecognizer *iface,
+    ISpeechRecognizerUIOptions **options)
+{
+    FIXME("iface %p, operation %p stub!\n", iface, options);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_add_RecognitionQualityDegrading(ISpeechRecognizer *iface,
+    ITypedEventHandler_ISpeechRecognizer_ISpeechRecognitionQualityDegradingEventArgs *handler, EventRegistrationToken *token)
+{
+    FIXME("iface %p, operation %p, token %p, stub!\n", iface, handler, token);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_remove_RecognitionQualityDegrading(
+    ISpeechRecognizer *iface, EventRegistrationToken token)
+{
+    FIXME("iface %p, token %#I64x, stub!\n", iface, token);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_add_StateChanged(ISpeechRecognizer *iface,
+    ITypedEventHandler_ISpeechRecognizer_ISpeechRecognizerStateChangedEventArgs *handler, EventRegistrationToken *token)
+{
+    FIXME("iface %p, operation %p, token %p, stub!\n", iface, handler, token);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_recognizer_remove_StateChanged(
+    ISpeechRecognizer *iface, EventRegistrationToken token)
+{
+    FIXME("iface %p, token %#I64x, stub!\n", iface, token);
+    return E_NOTIMPL;
+}
+
+static const struct ISpeechRecognizerVtbl speech_recognizer_vtbl =
+{
+    /* IUnknown methods */
+    speech_recognizer_QueryInterface,
+    speech_recognizer_AddRef,
+    speech_recognizer_Release,
+    /* IInspectable methods */
+    speech_recognizer_GetIids,
+    speech_recognizer_GetRuntimeClassName,
+    speech_recognizer_GetTrustLevel,
+    /* ISpeechRecognizer methods */
+    speech_recognizer_CompileConstraintsAsync,
+    speech_recognizer_RecognizeAsync,
+    speech_recognizer_RecognizeWithUIAsync,
+    speech_recognizer_get_Constraints,
+    speech_recognizer_get_CurrentLanguage,
+    speech_recognizer_get_Timeouts,
+    speech_recognizer_get_UIOptions,
+    speech_recognizer_add_RecognitionQualityDegrading,
+    speech_recognizer_remove_RecognitionQualityDegrading,
+    speech_recognizer_add_StateChanged,
+    speech_recognizer_remove_StateChanged,
+};
+
+static HRESULT speech_recognizer_create(REFIID iid, void **obj)
+{
+    struct speech_recognizer *This;
+    HRESULT hr;
+
+    if (!(This = heap_alloc_zero(sizeof(*This))))
+        return E_OUTOFMEMORY;
+
+    This->ISpeechRecognizer_iface.lpVtbl = &speech_recognizer_vtbl;
+    This->ref = 1;
+
+    hr = ISpeechRecognizer_QueryInterface(&This->ISpeechRecognizer_iface, iid, obj);
+    ISpeechRecognizer_Release(&This->ISpeechRecognizer_iface);
+
+    return hr;
+}
+
+#pragma endregion ISpeechRecognizer
\ No newline at end of file
diff --git a/dlls/windows.media.speech/windows_media_speech_private.h b/dlls/windows.media.speech/windows_media_speech_private.h
new file mode 100644
index 00000000000..c236f2184f6
--- /dev/null
+++ b/dlls/windows.media.speech/windows_media_speech_private.h
@@ -0,0 +1,53 @@
+/* WinRT Windows.Media.Speech private header
+ *
+ * Copyright 2021 Bernhard KÃ¶lbl
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#ifndef __WINE_WINDOWS_MEDIA_SPEECH_PRIVATE_H
+#define __WINE_WINDOWS_MEDIA_SPEECH_PRIVATE_H
+
+#include "wine/debug.h"
+#include "wine/heap.h"
+
+#include <stdarg.h>
+
+#define COBJMACROS
+#include "windef.h"
+#include "winbase.h"
+#include "winstring.h"
+#include "objbase.h"
+
+#ifdef WINDOWS_MEDIA_SPEECH_INIT_GUID
+#include "initguid.h"
+#endif
+
+#include "activation.h"
+
+#define WIDL_using_Windows_Foundation
+#define WIDL_using_Windows_Foundation_Collections
+#include "windows.foundation.h"
+#define WIDL_using_Windows_Globalization
+#include "windows.globalization.h"
+#define WIDL_using_Windows_Media_SpeechSynthesis
+#include "windows.media.speechsynthesis.h"
+#define WIDL_using_Windows_Media_SpeechRecognition
+#include "windows.media.speechrecognition.h"
+
+#endif
+
+// static HRESULT speech_continuous_recognition_completed_event_args_create(REFIID iid, void **obj);
+// static HRESULT speech_recognizer_create(REFIID iid, void **obj);
\ No newline at end of file
diff --git a/include/Makefile.in b/include/Makefile.in
index e5ae8429ed0..cdbd5025348 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -781,6 +781,7 @@ SOURCES = \
 	windows.h \
 	windows.media.devices.idl \
 	windows.media.idl \
+	windows.media.speechrecognition.idl \
 	windows.media.speechsynthesis.idl \
 	windows.storage.streams.idl \
 	windows.system.idl \
diff --git a/include/windows.globalization.idl b/include/windows.globalization.idl
index c08f7bd27d9..405c24ae728 100644
--- a/include/windows.globalization.idl
+++ b/include/windows.globalization.idl
@@ -29,6 +29,10 @@ import "windows.foundation.idl";
 namespace Windows {
     namespace Globalization {
         typedef enum DayOfWeek DayOfWeek;
+        interface ILanguage;
+        interface ILanguage2;
+        interface ILanguage3;
+        runtimeclass Language;
     }
 }
 
@@ -45,5 +49,43 @@ namespace Windows {
             Friday    = 5,
             Saturday  = 6
         };
+
+        [
+            exclusiveto(Windows.Globalization.Language),
+            uuid(EA79A752-F7C2-4265-B1BD-C4DEC4E4F080)
+        ]
+        interface ILanguage : IInspectable
+        {
+
+        }
+
+        [
+            exclusiveto(Windows.Globalization.Language),
+            uuid(6A47E5B5-D94D-4886-A404-A5A5B9D5B494)
+        ]
+        interface ILanguage2 : IInspectable
+        {
+
+        }
+
+        [
+            exclusiveto(Windows.Globalization.Language),
+            uuid(C6AF3D10-641A-5BA4-BB43-5E12AED75954)
+        ]
+        interface ILanguage3 : IInspectable
+        {
+
+        }
+
+        [
+            marshaling_behavior(agile),
+            uuid(144B0F3D-2D59-5DD2-B012-908EC3E06435)
+        ]
+        runtimeclass Language
+        {
+            [default] interface Windows.Globalization.ILanguage;
+            interface Windows.Globalization.ILanguage2;
+            interface Windows.Globalization.ILanguage3;
+        }
     }
 }
diff --git a/include/windows.media.speechrecognition.idl b/include/windows.media.speechrecognition.idl
new file mode 100644
index 00000000000..f6682345b01
--- /dev/null
+++ b/include/windows.media.speechrecognition.idl
@@ -0,0 +1,338 @@
+/*
+ * Copyright 2021 Bernhard KÃ¶lbl
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#ifdef __WIDL__
+#pragma winrt ns_prefix
+#endif
+
+import "inspectable.idl";
+import "windows.globalization.idl";
+import "windows.foundation.idl";
+import "windows.media.idl";
+
+namespace Windows {
+    namespace Media {
+        namespace SpeechRecognition {
+            typedef enum SpeechContinuousRecognitionMode SpeechContinuousRecognitionMode;
+            typedef enum SpeechRecognitionAudioProblem SpeechRecognitionAudioProblem;
+            typedef enum SpeechRecognitionConfidence SpeechRecognitionConfidence;
+            typedef enum SpeechRecognitionConstraintProbability SpeechRecognitionConstraintProbability;
+            typedef enum SpeechRecognitionConstraintType SpeechRecognitionConstraintType;
+            typedef enum SpeechRecognitionResultStatus SpeechRecognitionResultStatus;
+            typedef enum SpeechRecognitionScenario SpeechRecognitionScenario;
+            typedef enum SpeechRecognizerState SpeechRecognizerState; 
+            interface ISpeechContinuousRecognitionCompletedEventArgs;
+            // interface ISpeechContinuousRecognitionResultGeneratedEventArgs;
+            // interface ISpeechContinuousRecognitionSession;
+            interface ISpeechRecognitionCompilationResult;
+            interface ISpeechRecognitionConstraint;
+            // interface ISpeechRecognitionGrammarFileConstraint;
+            // interface ISpeechRecognitionGrammarFileConstraintFactory;
+            // interface ISpeechRecognitionHypothesis;
+            // interface ISpeechRecognitionHypothesisGeneratedEventArgs;
+            // interface ISpeechRecognitionListConstraint;
+            // interface ISpeechRecognitionListConstraintFactory;
+            interface ISpeechRecognitionQualityDegradingEventArgs;
+            interface ISpeechRecognitionResult;
+            interface ISpeechRecognitionResult2;
+            // interface ISpeechRecognitionSemanticInterpretation;
+            // interface ISpeechRecognitionTopicConstraint;
+            // interface ISpeechRecognitionTopicConstraintFactory;
+            // interface ISpeechRecognitionVoiceCommandDefinitionConstraint;
+            interface ISpeechRecognizer;
+            interface ISpeechRecognizer2;
+            // interface ISpeechRecognizerFactory;
+            interface ISpeechRecognizerStateChangedEventArgs;
+            // interface ISpeechRecognizerStatics;
+            // interface ISpeechRecognizerStatics2;
+            interface ISpeechRecognizerTimeouts;
+            interface ISpeechRecognizerUIOptions;
+            runtimeclass SpeechRecognizerUIOptions;
+            runtimeclass SpeechContinuousRecognitionCompletedEventArgs;
+            // runtimeclass SpeechContinuousRecognitionResultGeneratedEventArgs;
+            runtimeclass SpeechRecognitionCompilationResult;
+            // runtimeclass SpeechRecognitionGrammarFileConstraint;
+            // runtimeclass SpeechRecognitionHypothesis;
+            // runtimeclass SpeechRecognitionHypothesisGeneratedEventArgs;
+            // runtimeclass SpeechRecognitionListConstraint;
+            runtimeclass SpeechRecognitionQualityDegradingEventArgs;
+            runtimeclass SpeechRecognitionResult;
+            // runtimeclass SpeechRecognitionSemanticInterpretation;
+            // runtimeclass SpeechRecognitionTopicConstraint;
+            // runtimeclass SpeechRecognitionVoiceCommandDefinitionConstraint;
+            runtimeclass SpeechRecognizer;
+            runtimeclass SpeechRecognizerStateChangedEventArgs;
+            runtimeclass SpeechRecognizerTimeouts;
+        }
+    }
+}
+
+namespace Windows {
+    namespace Media {
+        namespace SpeechRecognition {
+            declare {
+                interface Windows.Foundation.IAsyncOperation<Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult*>;
+                interface Windows.Foundation.AsyncOperationCompletedHandler<Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult*>;
+                interface Windows.Foundation.IAsyncOperation<Windows.Media.SpeechRecognition.SpeechRecognitionResult*>;
+                interface Windows.Foundation.AsyncOperationCompletedHandler<Windows.Media.SpeechRecognition.SpeechRecognitionResult*>;
+                interface Windows.Foundation.IAsyncOperation<Windows.Media.SpeechRecognition.SpeechRecognitionResult*>;
+                interface Windows.Foundation.AsyncOperationCompletedHandler<Windows.Media.SpeechRecognition.SpeechRecognitionResult*>;
+                /* Following line is actually IVector not IVectorView! FIXME! */
+                interface Windows.Foundation.Collections.IVectorView<Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint*>;
+                interface Windows.Foundation.TypedEventHandler<Windows.Media.SpeechRecognition.ISpeechRecognizer*, Windows.Media.SpeechRecognition.ISpeechRecognitionQualityDegradingEventArgs*>;
+                interface Windows.Foundation.TypedEventHandler<Windows.Media.SpeechRecognition.ISpeechRecognizer*, Windows.Media.SpeechRecognition.ISpeechRecognizerStateChangedEventArgs*>;
+            }
+        }
+    }
+}
+
+namespace Windows {
+    namespace Media {
+        namespace SpeechRecognition {
+
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            enum SpeechContinuousRecognitionMode
+            {
+                Default = 0,
+                PauseOnRecognition = 1
+            };
+
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            enum SpeechRecognitionAudioProblem
+            {
+                None = 0,
+                TooNoisy = 1,
+                NoSignal = 2,
+                TooLoud = 3,
+                TooQuiet = 4,
+                TooFast = 5,
+                TooSlow = 6,
+            };
+
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            enum SpeechRecognitionConfidence
+            {
+                High = 0,
+                Medium = 1,
+                Low = 2,
+                Rejected = 3,
+            };
+
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            enum SpeechRecognitionConstraintProbability
+            {
+                Default = 0,
+                Min = 1,
+                Max = 2,
+            };
+
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            enum SpeechRecognitionConstraintType
+            {
+                Topic = 0,
+                List = 1,
+                Grammar = 2,
+                VoiceCommandDefinition = 3,
+            };
+
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            enum SpeechRecognitionResultStatus
+            {
+                Success = 0,
+                TopicLanguageNotSupported = 1,
+                GrammarLanguageMismatch = 2,
+                GrammarCompilationFailure = 3,
+                AudioQualityFailure = 4,
+                UserCanceled = 5,
+                Unknown = 6,
+                TimeoutExceeded = 7,
+                PauseLimitExceeded = 8,
+                NetworkFailure = 9,
+                MicrophoneUnavailable = 10,
+            };
+
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            enum SpeechRecognitionScenario
+            {
+                WebSearch = 0,
+                Dictation = 1,
+                FormFilling = 2,
+            };
+
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            enum SpeechRecognizerState
+            {
+                Idle = 0,
+                Capturing = 1,
+                Processing = 2,
+                SoundStarted = 3,
+                SoundEnded = 4,
+                SpeechDetected = 5,
+                Paused = 6,
+            };
+
+            [
+            contract(Windows.Foundation.UniversalApiContract, 1.0),
+            exclusiveto(Windows.Media.SpeechRecognition.SpeechContinuousRecognitionCompletedEventArgs),
+            uuid(e3d069bb-e30c-5e18-424b-7fbe81f8fbd0)
+            ]
+            interface ISpeechContinuousRecognitionCompletedEventArgs : IInspectable
+            {
+                [propget] HRESULT Status([out] [retval] Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus* value);
+            }
+
+            [
+                contract(Windows.Foundation.UniversalApiContract, 1.0),
+                marshaling_behavior(agile)
+            ]
+            runtimeclass SpeechContinuousRecognitionCompletedEventArgs
+            {
+                [default] interface Windows.Media.SpeechRecognition.ISpeechContinuousRecognitionCompletedEventArgs;
+            }
+
+            [
+            contract(Windows.Foundation.UniversalApiContract, 1.0),
+            exclusiveto(Windows.Media.SpeechRecognition.SpeechRecognitionResult),
+            uuid(4E303157-034E-4652-857E-D0454CC4BEEC)
+            ]
+            interface ISpeechRecognitionResult : IInspectable
+            {
+                //[propget] HRESULT Status([out] [retval] Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus* value);
+            }
+
+            [
+                contract(Windows.Foundation.UniversalApiContract, 1.0),
+                marshaling_behavior(agile),
+                uuid(BA3EEBE8-8D7C-51F2-9ED4-EBAFE3674DB4)
+            ]
+            runtimeclass SpeechRecognitionResult
+            {
+                [default] interface Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
+                interface Windows.Media.SpeechRecognition.ISpeechRecognitionResult2;
+            }
+
+            [
+            contract(Windows.Foundation.UniversalApiContract, 1.0),
+            exclusiveto(Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult),
+            uuid(407E6C5D-6AC7-4DA4-9CC1-2FCE32CF7489)
+            ]
+            interface ISpeechRecognitionCompilationResult : IInspectable
+            {
+                //[propget] HRESULT Status([out] [retval] Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus* value);
+            }
+
+            [
+                contract(Windows.Foundation.UniversalApiContract, 1.0),
+                marshaling_behavior(agile),
+                uuid(78C859BD-14D4-5C40-ABFF-490616D5E92D)
+            ]
+            runtimeclass SpeechRecognitionCompilationResult
+            {
+                [default] interface Windows.Media.SpeechRecognition.ISpeechRecognitionCompilationResult;
+            }
+
+            [
+            contract(Windows.Foundation.UniversalApiContract, 1.0),
+            exclusiveto(Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult),
+            uuid(738F00B1-E18C-5140-A53A-F1788D10C93D)
+            ]
+            interface ISpeechRecognitionConstraint : IInspectable
+            {
+
+            }
+
+            [
+            contract(Windows.Foundation.UniversalApiContract, 1.0),
+            exclusiveto(Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult),
+            uuid(4FE24105-8C3A-4C7E-8D0A-5BD4F5B14AD8)
+            ]
+            interface ISpeechRecognitionQualityDegradingEventArgs : IInspectable
+            {
+
+            }
+
+            [
+            contract(Windows.Foundation.UniversalApiContract, 1.0),
+            exclusiveto(Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult),
+            uuid(563D4F09-BA03-4BAD-AD81-DDC6C4DAB0C3)
+            ]
+            interface ISpeechRecognizerStateChangedEventArgs : IInspectable
+            {
+
+            }
+
+            [
+            contract(Windows.Foundation.UniversalApiContract, 1.0),
+            exclusiveto(Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult),
+            uuid(2EF76FCA-6A3C-4DCA-A153-DF1BC88A79AF)
+            ]
+            interface ISpeechRecognizerTimeouts : IInspectable
+            {
+
+            }
+
+            [
+            contract(Windows.Foundation.UniversalApiContract, 1.0),
+            exclusiveto(Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult),
+            uuid(7888D641-B92B-44BA-A25F-D1864630641F)
+            ]
+            interface ISpeechRecognizerUIOptions : IInspectable
+            {
+
+            }
+
+            [
+            contract(Windows.Foundation.UniversalApiContract, 1.0),
+            exclusiveto(Windows.Media.SpeechRecognition.SpeechContinuousRecognitionCompletedEventArgs),
+            uuid(0BC3C9CB-C26A-40F2-AEB5-8096B2E48073)
+            ]
+            interface ISpeechRecognizer : IInspectable
+            {
+                HRESULT CompileConstraintsAsync(
+                        [out, retval] Windows.Foundation.IAsyncOperation<Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult*> **operation);
+                HRESULT RecognizeAsync([out, retval] Windows.Foundation.IAsyncOperation<Windows.Media.SpeechRecognition.SpeechRecognitionResult*> **operation);
+                HRESULT RecognizeWithUIAsync([out, retval] Windows.Foundation.IAsyncOperation<Windows.Media.SpeechRecognition.SpeechRecognitionResult*> **operation);
+                /* Following line is actually IVector not IVectorView! FIXME! */
+                [propget] HRESULT Constraints([out, retval] Windows.Foundation.Collections.IVectorView<Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint*> **vector);
+                [propget] HRESULT CurrentLanguage([out, retval] Windows.Globalization.Language **language);
+                [propget] HRESULT Timeouts([out, retval] Windows.Media.SpeechRecognition.ISpeechRecognizerTimeouts **timeouts);
+                [propget] HRESULT UIOptions([out, retval] Windows.Media.SpeechRecognition.ISpeechRecognizerUIOptions **options);
+                [eventadd] HRESULT RecognitionQualityDegrading(
+                        [in] Windows.Foundation.TypedEventHandler<Windows.Media.SpeechRecognition.ISpeechRecognizer*, Windows.Media.SpeechRecognition.ISpeechRecognitionQualityDegradingEventArgs*> *handler,
+                        [out, retval] EventRegistrationToken* token);
+                [eventremove] HRESULT RecognitionQualityDegrading(
+                        [in] EventRegistrationToken token);
+                [eventadd] HRESULT StateChanged(
+                        [in] Windows.Foundation.TypedEventHandler<Windows.Media.SpeechRecognition.ISpeechRecognizer*, Windows.Media.SpeechRecognition.ISpeechRecognizerStateChangedEventArgs*> *handler,
+                        [out, retval] EventRegistrationToken* token);
+                [eventremove] HRESULT StateChanged(
+                        [in] EventRegistrationToken token);
+            }
+
+            [
+                contract(Windows.Foundation.UniversalApiContract, 1.0),
+                marshaling_behavior(agile),
+                uuid(0BC3C9CB-C26A-40F2-AEB5-8096B2E48073)
+            ]
+            runtimeclass SpeechRecognizer
+            {
+                [default] interface Windows.Media.SpeechRecognition.ISpeechRecognizer;
+            }
+        }
+    }
+}
diff --git a/include/windows.media.speechsynthesis.idl b/include/windows.media.speechsynthesis.idl
index 29dca510dee..5b6092dbc98 100644
--- a/include/windows.media.speechsynthesis.idl
+++ b/include/windows.media.speechsynthesis.idl
@@ -139,7 +139,8 @@ namespace Windows {
 
             [
                 contract(Windows.Foundation.UniversalApiContract, 1.0),
-                marshaling_behavior(agile)
+                marshaling_behavior(agile),
+                uuid(00BD028A-E2AD-57AF-9829-F8B273D2717B)
             ]
             runtimeclass VoiceInformation
             {
-- 
2.34.1

